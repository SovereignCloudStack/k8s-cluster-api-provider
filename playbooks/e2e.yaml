---
- name: E2E test
  hosts: all
  vars:
    cloud_provider: "{{ cloud }}"  # inherited from the parent job
    project_dir: "{{ ansible_user_dir }}/{{ zuul.project.src_dir }}"
    project_tf_dir: "{{ project_dir }}/terraform"
    # Some Kubernetes resources managed by the k8s-cluster-api-provider project employ names
    # formed by combining elements such as a prefix, cluster-name, and additional suffix.
    # This combined naming convention may potentially exceed the character limits imposed by
    # Kubernetes. To mitigate this issue, we take precautions by truncating both the prefix
    # and the cluster name to 12 characters each. This adjustment ensures that we stay
    # within Kubernetes' limits and allows us to utilize a single OpenStack project with
    # multiple k8s-capi deployments.
    prefix: "{{ ('pr'+ zuul.change + '-' + zuul.build) | truncate(12, True, '') }}"
    testcluster_name: "{{ ('pr'+ zuul.change + '-' + zuul.build) | truncate(12, True, '') }}"
  environment:
    ENVIRONMENT: "{{ cloud_provider }}"
    PATH: "{{ ansible_user_dir }}/.local/bin:{{ ansible_env.PATH }}"
  tasks:
  - name: Prepare environment
    block:
    - name: Get PR details
      uri:
        url: "https://api.github.com/repos/{{ zuul.project.name }}/pulls/{{ zuul.change }}"
        body_format: json
        headers:
          Accept: application/vnd.github+json
          X-GitHub-Api-Version: 2022-11-28
      register: pull_request
      when: git_reference is undefined or git_repo is undefined
    - name: Set facts based on job vars (git_reference, git_repo) or use PR details if job vars are not defined
      set_fact:
        git_branch_name: "{{ git_reference | default(pull_request.json.head.ref) }}"
        git_repository_url: "{{ git_repo | default(pull_request.json.head.repo.clone_url) }}"
    - name: Create environment file
      template:
        src: "templates/environment.tfvars.j2"
        dest: "{{ project_tf_dir }}/environments/environment-{{ cloud_provider }}.tfvars"
    - name: Get default interface name
      shell: "ip route show default | head -n1 | sed 's/^.*dev \\([^ ]*\\).*$/\\1/'"
      register: dev
    - name: Set mtu for the default interface  # workaround for terraform file provisioner scp error
      command: "ip link set {{ dev.stdout }} mtu 1500"
      become: true
  - name: Create k8s cluster and execute sonobouy {{ sonobouy_mode }} check
    block:
    - name: Create k8s cluster
      command: "make create GITREFERENCE={{ git_branch_name }} GITREPO={{ git_repository_url }}"
      args:
        chdir: "{{ project_tf_dir }}"
    - name: Get kubeconfig of the workload k8s cluster
      command: "make get-kubeconfig TESTCLUSTER={{ testcluster_name }}"
      args:
        chdir: "{{ project_tf_dir }}"
    - name: Wait for all system pods in the workload k8s cluster to become ready
      command: "kubectl wait -n kube-system --for=condition=Ready --timeout={{ wait_for_cluster }}s pod --all"
      args:
        chdir: "{{ project_tf_dir }}"
      environment:
        KUBECONFIG: "{{ testcluster_name }}.yaml.{{ cloud_provider }}"
    - name: Execute sonobouy {{ sonobouy_mode }} check
      command: "make check-{{ sonobouy_mode }}"
      register: sonobouy_results
      args:
        chdir: "{{ project_tf_dir }}"
    always:
    - name: Parse sonobouy results
      set_fact:
        sonobouy_results_parsed: "{{ sonobouy_results.stdout | regex_search('=== Collecting results ===[\\S\\s]*') }}"
      when: sonobouy_results is defined
      ignore_errors: true  # ignore when this task failed as it is nice to have, and we should ensure that fullclean is reached
    - name: Insert parsed sonobouy results to the warning message that will be appended to the comment zuul leaves on the PR
      zuul_return:
        data:
          zuul:
            warnings:
              - "<details>\n  <summary><b>Sonobouy results</b></summary>\n{{ sonobouy_results_parsed }}\n</details>"
      when: sonobouy_results_parsed is defined and sonobouy_results_parsed | length > 0
      ignore_errors: true  # ignore when this task failed as it is nice to have, and we should ensure that fullclean is reached
    - name: Cleanup - fullclean
      command: "make fullclean"
      args:
        chdir: "{{ project_tf_dir }}"
