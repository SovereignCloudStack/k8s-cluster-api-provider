#!/usr/bin/env bash

KUBERNETES_VERSION="${kubernetes_version}"
VERSION_CAPI_IMAGE=$(echo $KUBERNETES_VERSION | sed 's/\.[[:digit:]]*$//g')
PROVIDER="${provider}"
IMGREG_EXTRA="${image_registration_extra_flags}"


#install Openstack CLI
sudo apt install -y python3-openstackclient

#download/upload image to openstack
CAPIIMG=$(openstack --os-cloud $PROVIDER image list --name ubuntu-capi-image-$KUBERNETES_VERSION)
if test -z "$CAPIIMG"; then
  # TODO: Check signature
  wget https://images.osism.tech/openstack-k8s-capi-images/ubuntu-2004-kube-$VERSION_CAPI_IMAGE/ubuntu-2004-kube-$KUBERNETES_VERSION.qcow2
  FMT=qcow2
  IMGINFO=$(qemu-img info "$1")
  DIKKSZ=$(echo "$IMGINFO" | grep '^virtual size' | sed 's/^[^(]*(\([0-9]*\) bytes).*$/\1/')
  DISKSZ=$(((DISKSZ+1073741823)/1073741824))
  IMGDATE=$((date -r ubuntu-2004-kube-$KUBERNETES_VERSION.qcow2 +%F))
  if test "${kube_image_raw}" = "true"; then
    FMT=raw
    qemu-img convert ubuntu-2004-kube-$KUBERNETES_VERSION.qcow2 -O raw -S 4k ubuntu-2004-kube-$KUBERNETES_VERSION.raw && rm ubuntu-2004-kube-$KUBERNETES_VERSION.qcow2
  fi
  #TODO min-disk, min-ram, other std. image metadata
  openstack --os-cloud $PROVIDER image create --disk-format $FMT --min-ram 1024 --min-disk $DISKSZ --property image_guild_date="$IMGDATE" --property image_original_user=ubuntu --property architecture=x86_64 --property hypervisor_type=kvm --property os_distro=Ubuntu --property os_version="20.04" --property hw_disk_bus=scsi --property hw_scsi_model=virtio-scsi --property hw_rng_model=virtio --property image_source=https://images.osism.tech/openstack-k8s-capi-images/ubuntu-2004-kube-$VERSION_CAPI_IMAGE/ubuntu-2004-kube-$KUBERNETES_VERSION.qcow2 --tag managed_by_OSISM ${IMGREG_EXTRA} --file ubuntu-2004-kube-$KUBERNETES_VERSION.$FMT ubuntu-capi-image-$KUBERNETES_VERSION &
  sleep 5
  echo "Waiting for image ubuntu-capi-image-$KUBERNETES_VERSION: "
  let -i ctr=0
  while test $ctr -lt 60; do
    CAPIIMG=$(openstack --os-cloud $PROVIDER image list --name ubuntu-capi-image-$KUBERNETES_VERSION -f value -c ID -c Status)
    STATUS="$${CAPIIMG##* }"
    if test "$STATUS" = "saving" -o "$STATUS" = "active"; then break; fi
    echo -n "."
    let ctr+=1
    sleep 10
  done
  echo " $CAPIIMG"
  if test $ctr -ge 60; then
    echo "ERROR: Image ubuntu-capi-image-$KUBERNETES_VERSION not found" 1>&2
    exit 2
  fi
fi
