diff --git a/terraform/files/template/cluster-template.yaml b/terraform/files/template/cluster-template.yaml
index 43560bc..c0b6f82 100644
--- a/terraform/files/template/cluster-template.yaml
+++ b/terraform/files/template/cluster-template.yaml
@@ -7,10 +7,12 @@ metadata:
 spec:
   clusterNetwork:
     pods:
-      cidrBlocks: ["192.168.0.0/16"]    # CIDR block used by Calico.
+      cidrBlocks: ["${POD_CIDR}"]
+    services:
+      cidrBlocks: ["${SERVICE_CIDR}"]
     serviceDomain: "cluster.local"
   infrastructureRef:
-    #apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
+    # apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
     apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
     kind: OpenStackCluster
     name: ${CLUSTER_NAME}
@@ -19,7 +21,7 @@ spec:
     apiVersion: controlplane.cluster.x-k8s.io/v1beta1
     name: ${CLUSTER_NAME}-control-plane
 ---
-#apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
+# apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
 apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
 kind: OpenStackCluster
 metadata:
@@ -29,7 +31,7 @@ spec:
   identityRef:
     name: ${CLUSTER_NAME}-cloud-config
     kind: Secret
-  #managedAPIServerLoadBalancer: true
+  # managedAPIServerLoadBalancer: true
   apiServerLoadBalancer:
     enabled: true
   managedSecurityGroups: true
@@ -46,7 +48,7 @@ spec:
   machineTemplate:
     infrastructureRef:
       kind: OpenStackMachineTemplate
-      #apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
+      # apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
       apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
       name: "${PREFIX}-${CLUSTER_NAME}-control-plane-${CONTROL_PLANE_MACHINE_GEN}"
   kubeadmConfigSpec:
@@ -57,6 +59,8 @@ spec:
           cloud-provider: external
     clusterConfiguration:
       imageRepository: registry.k8s.io
+      dns:
+        imageRepository: registry.k8s.io/coredns
       apiServer:
         extraArgs:
           cloud-provider: external
@@ -83,17 +87,113 @@ spec:
         permissions: "0755"
         content: |
           #!/bin/bash
+          # Defragment & backup & trim script for SCS k8s-cluster-api-provider etcd cluster.
+          #
+          # Script exits without any defragmentation/backup/trim action if:
+          #  - It is executed on non leader etcd member
+          #  - It is executed on etcd cluster with some unhealthy member
+          #  - It is executed on single member etcd cluster
+          # Conditions above could be skipped and the script execution could be forced by the optional arguments:
+          #  - `--force-single`
+          #  - `--force-unhealthy`
+          #  - `--force-nonleader`
+          #
+          # The defragmentation on the etcd cluster is executed as follows:
+          #  - Defragment the non leader etcd members first
+          #  - Change the leadership to the randomly selected and defragmentation completed etcd member
+          #  - Defragment the local (ex-leader) etcd member
+          # Script then backup & trim local (ex-leader) etcd member
+          #
+          # Usage: etcd-defrag.sh [--force-single] [--force-unhealthy] [--force-nonleader]
+
           export LOG_DIR=/var/log
           export ETCDCTL_API=3
-          if test "$(etcdctl --cert /etc/kubernetes/pki/etcd/peer.crt --key /etc/kubernetes/pki/etcd/peer.key --cacert /etc/kubernetes/pki/etcd/ca.crt endpoint status | cut -d ',' -f 5)" != " false"; then
-              echo "Exit on leader"
+          ETCDCTL="etcdctl --cert /etc/kubernetes/pki/etcd/peer.crt --key /etc/kubernetes/pki/etcd/peer.key --cacert /etc/kubernetes/pki/etcd/ca.crt"
+
+          while :
+          do
+              case "$1" in
+              --force-single)
+                FORCE_SINGLE=1 ;;
+              --force-unhealthy)
+                FORCE_UNHEALTHY=1 ;;
+              --force-nonleader)
+                FORCE_NONLEADER=1 ;;
+              *) break;;
+              esac
+              shift
+          done
+
+          if test "$($ETCDCTL endpoint status | cut -d ',' -f 5 | tr -d [:blank:])" = "false"; then
+            if test "$FORCE_NONLEADER" = "1"; then
+              echo "Warning: forced defragmentation on non leader!"
+            else
+              echo "Exit on non leader (use --force-nonleader optional argument if you want to force defragmentation on non leader)"
+              exit 0
+            fi
+          fi
+
+          # Check health of all etcd members
+          while read MEMBER; do
+            if test "$(echo "$MEMBER" | cut -d ' ' -f 3 | tr -d [:])" != "healthy"; then
+              if test "$FORCE_UNHEALTHY" = "1"; then
+                echo "Warning: forced defragmentation on unhealthy etcd member $(echo "$MEMBER" | cut -d ' ' -f 1 | tr -d [:])!"
+              else
+                echo "Exit on unhealthy etcd member $(echo "$MEMBER" | cut -d ' ' -f 1 | tr -d [:]) (use --force-unhealthy optional argument if you want to force defragmentation on unhealthy etcd member)"
+                exit 0
+              fi
+            fi
+          done < <($ETCDCTL endpoint health --cluster)
+
+          # Get all etcd members with their endpoints, IDs, and leader status
+          declare -a MEMBERS
+          declare -i MEMBERS_LENGTH=0
+          while read MEMBER; do
+            MEMBERS+=( "$MEMBER" )
+            ((MEMBERS_LENGTH++))
+          done < <($ETCDCTL endpoint status --cluster)
+
+          if test "$FORCE" != "1" -a "$MEMBERS_LENGTH" = 1; then
+            if test "$FORCE_SINGLE" = "1"; then
+              echo "Warning: forced defragmentation on single member etcd!"
+            else
+              echo "Exit on single member etcd (use --force-single optional argument if you want to force defragmentation on single member etcd)"
               exit 0
+            fi
           fi
+
+          # Skip step-by-step defragmentation if the defragmentation on single member etcd is forced
+          if test -z "$FORCE_SINGLE"; then
+            declare -a NON_LEADER_IDS
+            declare -i NON_LEADER_IDS_LENGTH=0
+            for MEMBER in "$${MEMBERS[@]}"; do
+              # Get member ID, endpoint, and leader status
+              MEMBER_ENDPOINT=$(echo "$MEMBER" | cut -d ',' -f 1 | tr -d [:blank:])
+              MEMBER_ID=$(echo "$MEMBER" | cut -d ',' -f 2 | tr -d [:blank:])
+              MEMBER_IS_LEADER=$(echo "$MEMBER" | cut -d ',' -f 5 | tr -d [:blank:])
+              # Defragment if $MEMBER is not the leader
+              if test "$MEMBER_IS_LEADER" == "false"; then
+                echo "Etcd member $${MEMBER_ENDPOINT} is not the leader, let's defrag it!"
+                $ETCDCTL --endpoints="$MEMBER_ENDPOINT" defrag
+                NON_LEADER_IDS+=( "$MEMBER_ID" )
+                ((NON_LEADER_IDS_LENGTH++))
+              fi
+            done
+
+            # Randomly pick an ID from non-leader IDs and make it a leader
+            RANDOM_NON_LEADER_ID=$${NON_LEADER_IDS[ $(($RANDOM % "$NON_LEADER_IDS_LENGTH")) ]}
+            echo "Member $${RANDOM_NON_LEADER_ID} is becoming the leader"
+            $ETCDCTL move-leader $RANDOM_NON_LEADER_ID
+          fi
+
+          # Defrag this ex-leader etcd member
           sync
           sleep 2
-          etcdctl --cert /etc/kubernetes/pki/etcd/peer.crt --key /etc/kubernetes/pki/etcd/peer.key --cacert /etc/kubernetes/pki/etcd/ca.crt defrag
+          $ETCDCTL defrag
+
+          # Backup&trim this ex-leader etcd member
           sleep 3
-          etcdctl --cert /etc/kubernetes/pki/etcd/peer.crt --key /etc/kubernetes/pki/etcd/peer.key --cacert /etc/kubernetes/pki/etcd/ca.crt snapshot save /root/etcd-backup
+          $ETCDCTL snapshot save /root/etcd-backup
           chmod 0600 /root/etcd-backup
           xz -f /root/etcd-backup
           fstrim -v /var/lib/etcd
@@ -127,12 +227,22 @@ spec:

           [Timer]
           OnCalendar=*-*-* 02:30:00
-          RandomizedDelaySec=15m

           [Install]
           WantedBy=timers.target
+      - path: /root/tweak-kubeapi-memlimit.sh
+        owner: root:root
+        permissions: "0755"
+        content: |
+          #!/bin/bash
+          grep '^      limits:' /etc/kubernetes/manifests/kube-apiserver.yaml >/dev/null 2>&1 && exit 0
+          MEM=$(free -m | grep '^Mem:' | awk '{print $2;}')
+          CPU=$(grep '^processor' /proc/cpuinfo | wc -l)
+          sed -i "/^ *requests:/i\      limits:\n        memory: $((10+3*$MEM/4))M\n        cpu: $((750*$CPU))m" /etc/kubernetes/manifests/kube-apiserver.yaml
+          sed -i "/^ *requests:/a\        memory: 512M" /etc/kubernetes/manifests/kube-apiserver.yaml
     postKubeadmCommands:
       - if test "${ETCD_UNSAFE_FS}" = "true"; then mount -o remount,barrier=0,commit=20 /; sed -i 's@errors=remount-ro@errors=remount-ro,barrier=0,commit=20@' /etc/fstab; fi
+      - /root/tweak-kubeapi-memlimit.sh
       - sync; systemctl restart kubelet    # We should no longer need this
       - while test -z "$EPID"; do sleep 5; EPID=`pgrep etcd`; done; renice -10 $EPID; ionice -c2 -n0 -p $EPID
       - systemctl enable etcd-defrag.service
@@ -144,12 +254,25 @@ spec:
       - apt-get update -y
       - TRIMMED_KUBERNETES_VERSION=$(echo ${KUBERNETES_VERSION} | sed 's/\./\./g' | sed 's/^v//')
       - RESOLVED_KUBERNETES_VERSION=$(apt-cache policy kubelet | sed 's/\*\*\*//' | awk -v VERSION=$${TRIMMED_KUBERNETES_VERSION} '$1~ VERSION { print $1 }' | head -n1)
-      - apt-get install -y ca-certificates socat jq ebtables apt-transport-https cloud-utils prips containerd etcd-client kubelet=$${RESOLVED_KUBERNETES_VERSION} kubeadm=$${RESOLVED_KUBERNETES_VERSION} kubectl=$${RESOLVED_KUBERNETES_VERSION}
+      - apt-get install -y ca-certificates socat jq ebtables apt-transport-https cloud-utils prips containerd kubelet=$${RESOLVED_KUBERNETES_VERSION} kubeadm=$${RESOLVED_KUBERNETES_VERSION} kubectl=$${RESOLVED_KUBERNETES_VERSION}
+      # Allow to configure registry hosts in containerd
+      - |
+        cat <<EOT >> /etc/containerd/config.toml
+          [plugins."io.containerd.grpc.v1.cri".registry]
+            config_path = "/etc/containerd/certs.d"
+        EOT
       - systemctl daemon-reload
+      - systemctl restart containerd.service
+      # Install etcdctl
+      - ETCDCTL_VERSION=v3.5.9
+      - curl -L https://github.com/coreos/etcd/releases/download/$${ETCDCTL_VERSION}/etcd-$${ETCDCTL_VERSION}-linux-amd64.tar.gz -o /tmp/etcd-$${ETCDCTL_VERSION}-linux-amd64.tar.gz
+      - tar xzvf /tmp/etcd-$${ETCDCTL_VERSION}-linux-amd64.tar.gz -C /tmp/
+      - sudo cp /tmp/etcd-$${ETCDCTL_VERSION}-linux-amd64/etcdctl /usr/local/bin/
+      - rm -rf /tmp/etcd-$${ETCDCTL_VERSION}-linux-amd64 /tmp/etcd-$${ETCDCTL_VERSION}-linux-amd64.tar.gz
       # TODO: Detect local SSD and mkfs/mount /var/lib/etcd
   version: "${KUBERNETES_VERSION}"
 ---
-#apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
+# apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
 apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
 kind: OpenStackMachineTemplate
 metadata:
@@ -191,11 +314,11 @@ spec:
           kind: KubeadmConfigTemplate
       infrastructureRef:
         name: "${PREFIX}-${CLUSTER_NAME}-md-0-${WORKER_MACHINE_GEN}"
-        #apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
+        # apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
         apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
         kind: OpenStackMachineTemplate
 ---
-#apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
+# apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
 apiVersion: infrastructure.cluster.x-k8s.io/v1alpha6
 kind: OpenStackMachineTemplate
 metadata:
@@ -236,7 +359,14 @@ spec:
         - TRIMMED_KUBERNETES_VERSION=$(echo ${KUBERNETES_VERSION} | sed 's/\./\./g' | sed 's/^v//')
         - RESOLVED_KUBERNETES_VERSION=$(apt-cache policy kubelet | sed 's/\*\*\*//' | awk -v VERSION=$${TRIMMED_KUBERNETES_VERSION} '$1~ VERSION { print $1 }' | head -n1)
         - apt-get install -y ca-certificates socat jq ebtables apt-transport-https cloud-utils prips containerd kubelet=$${RESOLVED_KUBERNETES_VERSION} kubeadm=$${RESOLVED_KUBERNETES_VERSION} kubectl=$${RESOLVED_KUBERNETES_VERSION}
+        # Allow to configure registry hosts in containerd
+        - |
+          cat <<EOT >> /etc/containerd/config.toml
+            [plugins."io.containerd.grpc.v1.cri".registry]
+              config_path = "/etc/containerd/certs.d"
+          EOT
         - systemctl daemon-reload
+        - systemctl restart containerd.service
 ---
 apiVersion: v1
 kind: Secret
